import os
import hvac
from dataclasses import dataclass


@dataclass
class ProviderCredentials(object):
    url: str
    type: str
    login: str
    password: str


class SecretStorage(object):
    def __init__(self, url: str, mount: str = None, token: str = None, is_kube: bool = False, kube_sa: str = 'default'):
        self.mount = mount
        self.client = hvac.Client(
            url=url,
            token=token,
        )
        if is_kube:
            jwt = None
            with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as fin:
                jwt = fin.read()
            self.client.auth_kubernetes(kube_sa, jwt)
        if not self.client.is_authenticated():
            raise RuntimeError('Vault client can not authenticate')

    def get_credentials(self, name: str) -> ProviderCredentials:
        response = self.client.secrets.kv.read_secret_version(path=name, mount_point=self.mount)
        return ProviderCredentials(**response['data']['data'])


if __name__ == '__main__':
    storage = SecretStorage('https://vault.dev.brightfin.cloud', token=os.environ['VAULT_TOKEN'])
    cred = storage.get_credentials('test_telekom')
    print(f'URL:\t{cred.url}\nLogin:\t{cred.login}\nPassword:\t{cred.password}\nType:\t{cred.type}')

